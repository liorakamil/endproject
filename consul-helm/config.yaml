# config.yaml

# Configure global settings in this section.
global:
  # enabled is the master enabled switch. Setting this to true or false
  # will enable or disable all the components within this chart by default.
  # Each component can be overridden using the component-specific "enabled"
  # value.
  enabled: false
  # Image is the name (and tag) of the Consul Docker image for clients and
  # servers below. This can be overridden per component.
  #
  # Examples:
  #   image: "consul:1.5.0"
  #   image: "hashicorp/consul-enterprise:1.5.0-ent"   # Enterprise Consul image
  image: "consul:1.4.0"
# Datacenter is the name of the datacenter that the agents should register
  # as. This shouldn't be changed once the Consul cluster is up and running
  # since Consul doesn't support an automatic way to change this value
  # currently: https://github.com/hashicorp/consul/issues/1858
  datacenter: opsschool
  # Gossip encryption key. To enable gossip encryption, provide the name of
  # a Kubernetes secret that contains a gossip key. You can create a gossip
  # key with the "consul keygen" command. 
  # See https://www.consul.io/docs/commands/keygen.html 
  gossipEncryption:
    secretName: consul-gossip-encryption-key
    secretKey: key
# Client, when enabled, configures Consul clients to run on every node
# within the Kube cluster. The current deployment model follows a traditional
# DC where a single agent is deployed per node.
client:
  enabled: true
  image: null
  join: 
    - "provider=aws tag_key=consul_server tag_value=true"
  
  exposeGossipPorts: true

# Configuration for DNS configuration within the Kubernetes cluster.
# This creates a service that routes to all agents (client or server)
# for serving DNS requests. This DOES NOT automatically configure kube-dns
# today, so you must still manually configure a `stubDomain` with kube-dns
# for this to have any effect:
# https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#configure-stub-domain-and-upstream-dns-servers
dns:
  enabled: true

# syncCatalog will run the catalog sync process to sync K8S with Consul
# services. This can run bidirectional (default) or unidirectionally (Consul
# to K8S or K8S to Consul only).
#
# This process assumes that a Consul agent is available on the host IP.
# This is done automatically if clients are enabled. If clients are not
# enabled then set the node selection so that it chooses a node with a
# Consul agent.
syncCatalog:
  # True if you want to enable the catalog sync. "-" for default.
  enabled: true
  image: null
  default: true # true will sync by default, otherwise requires annotation
        
  # toConsul and toK8S control whether syncing is enabled to Consul or K8S
  # as a destination. If both of these are disabled, the sync will do nothing.
  toConsul: true
  toK8S: true

  



    enabled: false
  image: "consul:1.4.0"
    # Specify the Consul image to use
    image: 'consul:1.5.0'
    domain: consul
    datacenter: primarydc
    # Bootstrap ACLs within Consul. This is highly recommended.
    bootstrapACLs: true
    # Gossip encryption
    gossipEncryption:
      secretName: "encrypt-key"
      secretKey: "key"
  # Configure your Consul servers in this section.
  server:
    # Specify three servers that wait until all are healthy to bootstrap the Consul cluster.
    replicas: 3
    bootstrapExpect: 3
    # Specify the resources that servers request for placement. These values will serve a large environment.
    resources: |
      requests:
        memory: "32Gi"
        cpu: "4"
        disk: "50Gi"
      limits:
        memory: "32Gi"
        cpu: "4"
        disk: "50Gi"
    # If using Enterprise, reference the Kubernetes secret that holds your license here
    enterpriseLicense:
      secretName: 'consul-license'
      secretKey: 'key'
    # Prevent Consul servers from co-location on Kubernetes nodes.
    affinity: |
      podAntiAffinity:
       requiredDuringSchedulingIgnoredDuringExecution:
         - labelSelector:
             matchLabels:
               app: {{ template "consul.name" . }}
               release: "{{ .Release.Name }}"
               component: server
         topologyKey: kubernetes.io/hostname
  # Configure Consul clients in this section
  client:
    # Specify the resources that clients request for deployment.
    resources: |
      requests:
        memory: "8Gi"
        cpu: "2"
        disk: "15Gi"
      limits:
        memory: "8Gi"
        cpu: "2"
        disk: "15Gi"
  # Enable and configure the Consul UI.
  ui:
    enabled: true
  # Configure security for Consul Connect pod injection
  connectInject:
    enabled: true
    default: true
    aclBindingRuleSelector: “serviceaccount.name!=default”
  